set -euo pipefail


echo "Checking that we have a network..."
while test -z "${DFX_NETWORK:-}"; do
	read -rp "Which network would you like to use?  " DFX_NETWORK
done
export DFX_NETWORK


echo "Checking that we have an nns-dapp dir..."
while true ; do
test -e "${ND_DIR:-}/dfx.json" && break || {
  read -rp "Where is the nns-repo?  " ND_DIR
}
done


echo "Checking that we have network config"
jq -e '.networks[env.DFX_NETWORK]' dfx.json || {
  jq -s '.[0] * .[1]' dfx.json <( cd "$ND_DIR" ; jq '{networks: .networks}' dfx.json ) > dfx.json.new && mv dfx.json.new dfx.json
}


echo "Checking that we have an SNS..."
while test -z "${SNS_WASM:-}"; do
  SNS_WASM="$(jq -r '.wasm_canister[env.DFX_NETWORK]' canister_ids.json)"
  test -z "${SNS_WASM:-}" || break
  echo
  echo "Please populate canister_ids.json with the wasm_canister ID."
  read -rp "Press enter to continue... "
  echo
done


echo "Deleting existing identities..."
for ((i=1; i<5; i++)) ; do
    id="ident-$i"
    id_dir="$HOME/.config/dfx/identity/$id"
    if test -d "$id_dir"
    then
      read -rp "Delete identity $id? [y/N] " del_id
      del_id="$(echo "${del_id:-N}" | tr A-Z a-z)"
      [[ "$del_id" != "y" ]] || rm -fr "$id_dir"
    fi
done


echo "Creating identities..."
for ((i=1; i<5; i++)) ; do
    id="ident-$i"
    id_dir="$HOME/.config/dfx/identity/$id"
    if test -d "$id_dir"
    then
      echo "Identity $id already exists"
    else
      dfx identity new "$id" --disable-encryption
    fi
done


echo "Getting cycles for ident-1"
dfx identity use ident-1
export WALLET_CANISTER="$(dfx identity --network $DFX_NETWORK get-wallet)"
dfx wallet --network $DFX_NETWORK balance
: TODO: check cycles and loop if needed.


echo "Deploying dapp"
dfx canister --network "$DFX_NETWORK" call smiley_dapp getBackgroundColor '()' || {
  npm ci
  dfx deploy --network $DFX_NETWORK --with-cycles 1000000000000
}

echo "Getting dapp info..."
export DAPP_NAME=smiley_dapp_assets
echo "See: $(jq -r '.networks[env.DFX_NETWORK].config.HOST' dfx.json | awk -F '://' -v canister_id="$(jq -r .[env.DAPP_NAME][env.DFX_NETWORK] canister_ids.json)" '{print $1 FS canister_id "." $2}')"
read -rp "Press enter to continue... "
DAPP_FRONTEND="$(jq -r .smiley_dapp_assets[env.DFX_NETWORK] canister_ids.json)"
DAPP_BACKEND="$(jq -r .smiley_dapp[env.DFX_NETWORK] canister_ids.json)"
export DAPP_FRONTEND
export DAPP_BACKEND

echo "Querying the canister:"
set dfx canister --network "$DFX_NETWORK" call smiley_dapp getBackgroundColor '()'
echo "  ${*}"
"${@}"
read -rp "Press enter to continue... "


echo "Current list of SNSs:"
(
    cd "$ND_DIR"
    dfx canister --network $DFX_NETWORK call wasm_canister list_deployed_snses '(record {} )'
)
read -rp "Press enter to continue... "

echo "See SNS's in the frontend dapp:"
(
  cd "$ND_DIR"
  export DAPP_NAME=nns-dapp
  url="$(jq -r '.networks[env.DFX_NETWORK].config.HOST' dfx.json | awk -F '://' -v canister_id="$(jq -r .[env.DAPP_NAME][env.DFX_NETWORK] canister_ids.json)" '{print $1 FS canister_id "." $2}')"
  echo "See: ${url}/#/launchpad"
  read -rp "Press enter to continue... "
)

echo "Install quill"
command -v sns-quill ||
(
    git clone git@github.com:dfinity/sns-quill.git
    cd sns-quill
    make release
    install /home/max/dfn/snsdemo/sns-quill/target/release/sns-quill "$HOME/.local/bin/"
)

echo "Set the sns-quill network URL..."
export IC_URL="$(jq -r '.networks[env.DFX_NETWORK].providers[0]' dfx.json)"

echo -e "\nGetting front end neuron IDs..."
(
  export DAPP_NAME=nns-dapp
  url="$(jq -r '.networks[env.DFX_NETWORK].config.HOST' dfx.json | awk -F '://' -v canister_id="$(jq -r .[env.DAPP_NAME][env.DFX_NETWORK] canister_ids.json)" '{print $1 FS canister_id "." $2}')"
  echo "nns-dapp url: ${url}/#/neurons"
)
echo "Please stake 900 ICP in the nns-dapp, as user 10000, with a dissolve delay of 8 years."
read -rp "Please enter the neuron principal: " FRONTEND_NEURON_1
echo "Thank you.  This neuron represents the public voting majority on the IC."
echo

echo "Please stake 10 ICP in the nns-dapp, as user 10001, with a dissolve delay of 8 years."
read -rp "Please enter the neuron principal: " FRONTEND_NEURON_2
echo "Please add a hotkey fr the developer principal: " $(dfx --identity ident-1 identity get-principal)
read -rp "Please press enter to continue... "
echo "Thank you.  This neuron enables the developer to make proposals."
echo

read -rp "Please send 10 ICP to: $(dfx --identity ident-3 identity get-principal) (Press enter when done) "
read -rp "Please send 10 ICP to: $(dfx --identity ident-4 identity get-principal) (Press enter when done) "


